#!/usr/bin/env zsh

# Git profile switcher with SSH key detection
gitprofile() {
  # Find all SSH keys (excluding .pub files and known_hosts)
  local ssh_keys=($(find ~/.ssh -name "id_*" -o -name "*github*" -o -name "*git*" | grep -v "\.pub$" | grep -v "known_hosts" | sort))
  
  if [[ ${#ssh_keys[@]} -eq 0 ]]; then
    echo "No SSH keys found in ~/.ssh/"
    return 1
  fi
  
  echo "Current git config:"
  echo "Name: $(git config --global user.name)"
  echo "Email: $(git config --global user.email)"
  
  # Show current remote if in git repo
  if git rev-parse --git-dir > /dev/null 2>&1; then
    echo "Current remote: $(git remote get-url origin 2>/dev/null || echo 'None')"
  fi
  
  echo ""
  echo "Available profiles:"
  
  for i in {1..${#ssh_keys[@]}}; do
    local key_path=${ssh_keys[$i]}
    local key_name=$(basename $key_path)
    
    # Extract profile name (e.g., github_personal -> personal)
    local profile_name=$(echo "$key_name" | sed 's/^github_//' | sed 's/^git_//')
    
    # Auto-generate SSH host alias
    local ssh_host="github.com-$profile_name"
    
    # Set default names based on profile
    local default_name="George Baker"
    local default_email=""
    
    case "$profile_name" in
      personal)
        default_name="gbakes"
        default_email="gbakes89@gmail.com"
        ;;
      work)
        default_name="george-baker_geo"
        default_email="george.baker@geoguessr.com"
        ;;
    esac
    
    echo "$i) $profile_name ($key_name) -> $ssh_host"
    echo "   Name: $default_name, Email: $default_email"
  done
  
  echo -n "Select profile (1-${#ssh_keys[@]}): "
  read choice
  
  if [[ "$choice" =~ ^[0-9]+$ ]] && [[ $choice -ge 1 ]] && [[ $choice -le ${#ssh_keys[@]} ]]; then
    local selected_key=${ssh_keys[$choice]}
    local key_name=$(basename $selected_key)
    local profile_name=$(echo "$key_name" | sed 's/^github_//' | sed 's/^git_//')
    local ssh_host="github.com-$profile_name"
    
    # Set defaults based on profile
    local git_name=""
    local git_email=""
    
    case "$profile_name" in
      personal)
        git_name="gbakes"
        git_email="gbakes89@gmail.com"
        ;;
      work)
        git_name="george-baker_geo"
        git_email="george.baker@geoguessr.com"
        ;;
    esac
    
    # Allow overrides
    echo "Using defaults for $profile_name profile:"
    echo "Name: $git_name"
    echo "Email: $git_email"
    echo "SSH Host: $ssh_host"
    echo -n "Continue? (y/n): "
    read confirm
    
    if [[ "$confirm" != "y" ]]; then
      echo -n "Enter name: "
      read git_name
      echo -n "Enter email: "  
      read git_email
      echo -n "Enter SSH host alias: "
      read ssh_host
    fi
    
    git config --global user.name "$git_name"
    git config --global user.email "$git_email"
    
    # Add the selected key to ssh-agent
    ssh-add "$selected_key" 2>/dev/null
    
    # Update SSH config
    local ssh_config="$HOME/.ssh/config"
    
    # Remove existing entry for this host
    if [[ -f "$ssh_config" ]]; then
      sed -i.bak "/^Host $ssh_host$/,/^$/d" "$ssh_config"
    fi
    
    # Add new SSH config entry
    cat >> "$ssh_config" << EOF

Host $ssh_host
    HostName github.com
    User git
    IdentityFile $selected_key
EOF
    
    echo "Added SSH config for $ssh_host"
    
    # Update git remote if in a git repo
    if git rev-parse --git-dir > /dev/null 2>&1; then
      local current_remote=$(git remote get-url origin 2>/dev/null)
      if [[ -n "$current_remote" ]]; then
        # Extract repo path from current remote
        local repo_path=$(echo "$current_remote" | sed -E 's|.*github\.com[/:]||' | sed 's|\.git$||')
        local new_remote="git@$ssh_host:$repo_path.git"
        
        git remote set-url origin "$new_remote"
        echo "Updated remote to: $new_remote"
      fi
    fi
    
    echo "Switched to profile: $git_name <$git_email>"
    echo "Using SSH key: $key_name"
  else
    echo "Invalid selection"
  fi
}